-------------------------------------------------------------------------------
--
--  Copyright (c) 2023 Francesc Rocher <francesc.rocher@gnail.com>
--  SPDX-License-Identifier: CC-BY-NC-SA-4.0
--  https://creativecommons.org/licenses/by-nc-sa/4.0/
--
--  ---------------------------------------------------------------------------
--
--  The following problem is taken from Project Euler:
--
--                 https://projecteuler.net/problem=2
--
--  Even Fibonacci numbers
--  ----------------------
--
--  Each new term in the Fibonacci sequence is generated by adding the
--  previous two terms. By starting with 1 and 2, the first 10 terms will be:
--
--                 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--
--  By considering the terms in the Fibonacci sequence whose values do not
--  exceed four million, find the sum of the even-valued terms.
--
-------------------------------------------------------------------------------

with Euler_Tools; use Euler_Tools;

with Ada.Text_IO;                       use Ada.Text_IO;
with Ada.Numerics.Elementary_Functions; use Ada.Numerics.Elementary_Functions;

package body P0002_Even_Fibonacci_Numbers is

   --  Action  : Action_IFace_Access;
   --  Plotter : Plotter_IFace_Access;

   Number_Counter : Natural := 0;

   type Status_Type is (Stop, Run, Pause, Step);
   Status : Status_Type := Stop;

   ------------
   -- Answer --
   ------------

   overriding function Answer (P : P0002_Type) return String is
      Number : Integer_Type := Fibonacci_Start;
      Answer : Integer_Type := 0;
   begin

      loop
         if Is_Even (Number) then
            Answer         := @ + Number;
            Number_Counter := @ + 1;
         end if;
         Number := Fibonacci_Next;
         exit when Number > 4_000_000;
      end loop;

      return To_String (Answer);
   end Answer;

   -----------
   -- Notes --
   -----------

   overriding function Notes (P : P0002_Type) return String is
     ("There are" & Number_Counter'Image &
      " even Fibonacci numbers < 4000000");

   -------------------
   -- Plotter_Setup --
   -------------------

   overriding procedure Plotter_Setup
     (P : P0002_Type; Plotter : Plotter_IFace_Access)
   is
      Q          : Math_Point;
      Points_Sin : Point_List;
      Points_Cos : Point_List;
      Color      : constant String := "#999";
   begin
      --  P0002_Even_Fibonacci_Numbers.Plotter := Plotter;
      --  Plotter.Set_Axes (-10.0, 70.0, -6.0, 10.0);
      --  Plotter.Draw_Grid (0.0, 10.0, 0.0, 2.0);
      --  Plotter.Draw_Axes_Square;
      --  Plotter.Draw_Axes ("Number", "Decimals");

      --  for X in 0 .. 62 loop
      --     for Δx in 0 .. 25 loop
      --        Q.X := Float (X) + Float (Δx) * (1.0 / 25.0);
      --        Q.Y := 5.0 * Sin (Q.X / 5.0);
      --        Points_Sin.Append (Q);
      --        Q.Y := 5.0 * Cos (Q.X / 5.0);
      --        Points_Cos.Append (Q);
      --     end loop;
      --  end loop;
      --  Plotter.Plot (Points_Sin, "#933");
      --  Plotter.Plot (Points_Cos, "#339");

      Plotter.Set_Axes (-18.0, 18.0);
      --  Plotter.Draw_Axes ("X", "Y");
      Plotter.Draw_Grid (0.0, 1.0, 0.0, 1.0);
   end Plotter_Setup;

   --------------
   -- On_Start --
   --------------

   overriding procedure On_Start
     (P : in out P0002_Type; Plotter : Plotter_IFace_Access)
   is
      X, Y : Float;
   begin
      if P.Is_Started then
         return;
      end if;

      P.Start;
      Plotter.Clear_Plot;
      Put_Line ("On_Start!!");

      for X in -18 .. 17 loop
         for Y in -18 .. 17 loop
            Plotter.Rectangle
              (X0 => Float (X), Y0 => Float (Y), X1 => Float (X) + 1.0,
               Y1 => Float (Y) + 1.0, color => "#333");
            delay (0.05);
            P.Wait_To_Continue;
            if P.Is_Stopped then
               Plotter.Clear_Plot;
               Put_Line ("Stop computation");
               return;
            end if;
         end loop;
      end loop;

      P.Stop;
      Put_Line ("On_Start end!");
   end On_Start;

   --  overriding procedure On_Start
   --    (P : P0002_Type; Plotter : Plotter_IFace_Access)
   --  is
   --     Color : String := "#ccc";
   --  begin
   --     Plotter.Rectangle (0.0, 0.0, 1.0, 1.0, Color);
   --     delay (Duration (1));
   --     Plotter.Arc (1.0, 0.0, 0.99, 180.0, 90.0, "#f00");
   --     delay (Duration (1));

   --     Plotter.Set_Axes (-18.0 * 1.1, 18.0 * 1.1);
   --     Plotter.Clear_Plot;

   --     Plotter.Rectangle (0.0, 0.0, 1.0, 1.0, Color);
   --     Plotter.Arc (1.0, 0.0, 0.99, 180.0, 90.0, "#f00");
   --     Plotter.Rectangle (1.0, 1.0, 2.0, 0.0, Color);
   --     delay (Duration (1));
   --     Plotter.Arc (1.0, 0.0, 0.99, 90.0, 0.0, "#f00");
   --     delay (Duration (1));

   --     Plotter.Set_Axes (-18.0 * 1.2 * 1.1, 18.0 * 1.2 * 1.1);
   --     Plotter.Clear_Plot;

   --     Plotter.Rectangle (2.0, 0.0, 0.0, -2.0, Color);
   --     Plotter.Rectangle (0.0, 0.0, 1.0, 1.0, Color);
   --     Plotter.Arc (1.0, 0.0, 0.99, 180.0, 90.0, "#f00");
   --     Plotter.Rectangle (1.0, 1.0, 2.0, 0.0, Color);
   --     Plotter.Arc (1.0, 0.0, 0.99, 90.0, 0.0, "#f00");
   --     delay (Duration (1));
   --     Plotter.Arc (0.0, 0.0, 1.99, 0.0, 270.0, "#f00");
   --     delay (Duration (1));

   --     Plotter.Rectangle (0.0, -2.0, -3.0, 1.0, Color);
   --     delay (Duration (1));
   --     Plotter.Arc (0.0, 1.0, 2.99, 270.0, 180.0, "#f00");
   --     delay (Duration (1));

   --     Plotter.Rectangle (-3.0, 1.0, 2.0, 6.0, Color);
   --     delay (Duration (1));
   --     Plotter.Arc (2.0, 1.0, 4.99, 180.0, 90.0, "#f00");
   --     delay (Duration (1));

   --     Plotter.Rectangle (2.0, 6.0, 10.0, -2.0, Color);
   --     delay (Duration (1));
   --     Plotter.Arc (2.0, -2.0, 7.99, 90.0, 0.0, "#f00");
   --     delay (Duration (1));

   --     Plotter.Rectangle (10.0, -2.0, -3.0, -15.0, Color);
   --     delay (Duration (1));
   --     Plotter.Arc (-3.0, -2.0, 12.99, 0.0, 270.0, "#f00");
   --     delay (Duration (1));

   --     Plotter.Rectangle (-3.0, -15.0, -24.0, 6.0, Color);
   --     delay (Duration (1));
   --     Plotter.Arc (-3.0, 6.0, 20.99, 270.0, 180.0, "#f00");
   --     delay (Duration (1));
   --  end On_Start;

end P0002_Even_Fibonacci_Numbers;
